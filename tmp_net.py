#This is a tmp file to bootstrap testing with some hardcoded LSTM nets. 
#Eventually this functionality should be migrated to some save file that stoes LSTM net history.
from keras.models import Sequential, Model
from keras.layers import Input
from LSTM_Node import LSTM_Node, FC_Node, Network_Tree, LSTM_Tree, Attention, Merge_Node


def link_list(node_list):

    num_nodes = len(node_list)

    for idx, node in enumerate(node_list):

        #can't push to output of last node since it shold be a final node. Yes this condition makes my physically ill as well.
        #But im just trying to make it work.
        if idx == num_nodes - 1:
            break

        node_list[idx + 1].replace_empty_input(node, error = True, link = True)

        

#NOTE: This is a TEMPORARY function that should be used to test neurnal net generated by LSTM. 
#Please for the love of god delete this monstrosity once we have a dynamicly allocated file responsible for storing net representations.
def pre_file_test_bootstrap():

    lr = .001
    decay = .9
    runs  = 4
    step_frac = 1
    num_catg = 19

    meta_data = Input(shape=(3,), name = 'meta')

    node0 = LSTM_Node(neurons = 200, dropout = .25)
    node1 = LSTM_Node(neurons = 250, dropout = .25)
    node1.replace_empty_input(node0, error = True, link = True)
            
    node2 = Attention(1.0, 60)
    node2.replace_empty_input(node1, error = True, link = True)
    
    node3 = FC_Node(keep_prob = .75, neurons = 256, activation = 'relu')
    node3.replace_empty_input(node2, error = True, link = True)
    
    node4 = FC_Node(keep_prob = 1.0, neurons = 64, activation = 'relu')
    node5 = Merge_Node()
    
    node5.replace_empty_input(node3, error = True, link = True)
    node5.replace_empty_input(node4, error = True, link = True)

    node6 = FC_Node(keep_prob = .75, neurons = 150, activation = 'relu')
    node6.replace_empty_input(node5, error = True, link = True)
    
    node7 = FC_Node(keep_prob = 1.0,  neurons = num_catg, activation = 'softmax')
    node7.replace_empty_input(node6, error = True, link = True)

    tree = LSTM_Tree(lr, decay, runs, step_frac, node7, loss = None)

    return tree
